From 1dc4a0f5886b39028f3418dcc62df39355e08302 Mon Sep 17 00:00:00 2001
From: "nova.web@live.com" <2718WerJkl##>
Date: Sun, 22 Mar 2020 22:36:50 +0530
Subject: [PATCH 2/4] VU3GWN v1 changes. All cosmetic

---
 ubitx_v6.1_code/nano_gui.h          |  4 +--
 ubitx_v6.1_code/ubitx.h             |  3 +-
 ubitx_v6.1_code/ubitx_cat.cpp       |  6 ++--
 ubitx_v6.1_code/ubitx_ui.cpp        | 53 ++++++++++++++++-------------
 ubitx_v6.1_code/ubitx_v6.1_code.ino |  8 +++--
 5 files changed, 41 insertions(+), 33 deletions(-)

diff --git a/ubitx_v6.1_code/nano_gui.h b/ubitx_v6.1_code/nano_gui.h
index 4ae4719..f88ff6f 100644
--- a/ubitx_v6.1_code/nano_gui.h
+++ b/ubitx_v6.1_code/nano_gui.h
@@ -46,7 +46,7 @@ void scaleTouch(struct Point *p);
 #define DISPLAY_GREENYELLOW 0xAFE5  ///< 173, 255,  41
 #define DISPLAY_PINK        0xFC18  ///< 255, 130, 198
 
-#define TEXT_LINE_HEIGHT 18
+#define TEXT_LINE_HEIGHT 16 //18 //GPB.20200322A
 #define TEXT_LINE_INDENT 5
 
 #define BUTTON_PUSH
@@ -427,5 +427,3 @@ const GFXfont ubitx_font PROGMEM = {
 #define DISPLAY_PINK        0xFC18  ///< 255, 130, 198
 
 #endif // _NANO_GUI_H_
-
-
diff --git a/ubitx_v6.1_code/ubitx.h b/ubitx_v6.1_code/ubitx.h
index 018eae5..603ed06 100644
--- a/ubitx_v6.1_code/ubitx.h
+++ b/ubitx_v6.1_code/ubitx.h
@@ -122,7 +122,7 @@ extern int count;          //to generally count ticks, loops, etc
  * We use this technique to switch sidebands. This is to avoid placing the lsbCarrier close to
  * 11 MHz where its fifth harmonic beats with the arduino's 16 Mhz oscillator's fourth harmonic
  */
-
+#define VU3GWN_VER "VU3GWN v1"
 #define INIT_USB_FREQ   (11059200l)
 // limits the tuning and working range of the ubitx between 3 MHz and 30 MHz
 #define LOWEST_FREQ   (100000l)
@@ -183,6 +183,7 @@ void ritDisable();
 void checkCAT();
 void cwKeyer(void);
 void switchVFO(int vfoSelect);
+void displayVersion() ;
 
 int enc_read(void); // returns the number of ticks in a short interval, +ve in clockwise, -ve in anti-clockwise
 int btnDown(); //returns true if the encoder button is pressed
diff --git a/ubitx_v6.1_code/ubitx_cat.cpp b/ubitx_v6.1_code/ubitx_cat.cpp
index c15bc26..d9e277d 100644
--- a/ubitx_v6.1_code/ubitx_cat.cpp
+++ b/ubitx_v6.1_code/ubitx_cat.cpp
@@ -15,13 +15,13 @@
 
 static unsigned long rxBufferArriveTime = 0;
 static byte rxBufferCheckCount = 0;
-#define CAT_RECEIVE_TIMEOUT 500
+#define CAT_RECEIVE_TIMEOUT 2500 //GPB.20200322A //Changed from 500
 static byte cat[5]; 
 static byte insideCat = 0; 
 static byte useOpenRadioControl = 0;
 
 //for broken protocol
-#define CAT_RECEIVE_TIMEOUT 500
+#define CAT_RECEIVE_TIMEOUT 2500 //GPB.20200322A //Changed from 500
 
 #define CAT_MODE_LSB            0x00
 #define CAT_MODE_USB            0x01
@@ -453,5 +453,3 @@ void checkCAT(){
   processCATCommand2(cat);
   insideCat = 0;
 }
-
-
diff --git a/ubitx_v6.1_code/ubitx_ui.cpp b/ubitx_v6.1_code/ubitx_ui.cpp
index fbf456f..956466a 100644
--- a/ubitx_v6.1_code/ubitx_ui.cpp
+++ b/ubitx_v6.1_code/ubitx_ui.cpp
@@ -23,8 +23,8 @@ struct Button {
 #define MAX_BUTTONS 17
 const struct Button btn_set[MAX_BUTTONS] PROGMEM = { 
 //const struct Button  btn_set [] = {
-  {0, 10, 159, 36,  "VFOA", "A"},
-  {160, 10, 159, 36, "VFOB", "B"},
+  {0, 5, 159, 31,  "VFOA", "A"},
+  {160, 5, 159, 31, "VFOB", "B"},
   
   {0, 80, 60, 36,  "RIT", "R"},
   {64, 80, 60, 36, "USB", "U"},
@@ -40,9 +40,9 @@ const struct Button btn_set[MAX_BUTTONS] PROGMEM = {
 
   {0, 160, 60, 36, "15", "5"},
   {64, 160, 60, 36, "10", "1"},
-  {128, 160, 60, 36, "WPM", "W"},
-  {192, 160, 60, 36, "TON", "T"},
-  {256, 160, 60, 36, "FRQ", "F"},
+  {128, 160, 60, 36, "W/M", "W"},
+  {192, 160, 60, 36, "TN", "T"},
+  {256, 160, 60, 36, "FQ", "F"},
 };
 
 #define MAX_KEYS 17
@@ -104,8 +104,13 @@ void formatFreq(long f, char *buff) {
 }
 
 void drawCommandbar(char *text){
-  displayFillrect(30,45,280, 32, DISPLAY_NAVY);
-  displayRawText(text, 30, 45, DISPLAY_WHITE, DISPLAY_NAVY);
+  displayFillrect(60, 40, 280, 32, DISPLAY_NAVY);
+  displayRawText(text, 60, 45, DISPLAY_WHITE, DISPLAY_NAVY);
+}
+
+void displayVersion()
+{
+  displayRawText(VU3GWN_VER, 180, 210, DISPLAY_LIGHTGREY, DISPLAY_NAVY);
 }
 
 /** A generic control to read variable values
@@ -160,7 +165,7 @@ void printCarrierFreq(unsigned long freq){
   strncat(c, &b[2], 3);
   strcat(c, ".");
   strncat(c, &b[5], 1);
-  displayText(c, 110, 100, 100, 30, DISPLAY_CYAN, DISPLAY_NAVY, DISPLAY_NAVY);
+  displayText(c, 110, 100, 100, 30, DISPLAY_YELLOW, DISPLAY_NAVY, DISPLAY_NAVY);
 }
 
 void displayDialog(char *title, char *instructions){
@@ -218,7 +223,7 @@ void displayVFO(int vfo){
       displayColor = DISPLAY_WHITE;
       displayBorder = DISPLAY_WHITE;
     } else {
-      displayColor = DISPLAY_GREEN;
+      displayColor = DISPLAY_GREENYELLOW;
       displayBorder = DISPLAY_BLACK;
       formatFreq(vfoB, c+2);
     }
@@ -303,13 +308,13 @@ void fastTune(){
     active_delay(50);
   active_delay(300);
   
-  displayRawText("Fast tune", 100, 55, DISPLAY_CYAN, DISPLAY_NAVY);
+  displayRawText("Fast Tuning mode", 60, 45, DISPLAY_YELLOW, DISPLAY_NAVY);
   while(1){
     checkCAT();
 
     //exit after debouncing the btnDown
     if (btnDown()){
-      displayFillrect(100, 55, 120, 30, DISPLAY_NAVY);
+      displayFillrect(50, 45, 220, 30, DISPLAY_NAVY);
 
       //wait until the button is realsed and then return
       while(btnDown())
@@ -406,26 +411,29 @@ void enterFreq(){
 
 void drawCWStatus(){
   displayFillrect(0, 201, 320, 39, DISPLAY_NAVY);
-  strcpy(b, " cw:");
+  strcpy(b, " CW:");
   int wpm = 1200/cwSpeed;    
   itoa(wpm,c, 10);
   strcat(b, c);
-  strcat(b, "wpm, ");
-  itoa(sideTone, c, 10);
-  strcat(b, c);
-  strcat(b, "hz");
-  displayRawText(b, 0, 210, DISPLAY_CYAN, DISPLAY_NAVY);  
+  strcat(b, " w/m");
+  //strcat(b, "wpm, ");
+  //itoa(sideTone, c, 10);
+  //strcat(b, c);
+  //strcat(b, "hz");
+  displayRawText(b, 0, 210, DISPLAY_YELLOW, DISPLAY_NAVY);  
 }
 
 
 void drawTx(){
   if (inTx)
-    displayText("TX", 280, 48, 37, 28, DISPLAY_BLACK, DISPLAY_ORANGE, DISPLAY_BLUE);  
+    displayText("TX", 250, 42, 37, 28, DISPLAY_BLACK, DISPLAY_ORANGE, DISPLAY_BLUE);  
   else
-    displayFillrect(280, 48, 37, 28, DISPLAY_NAVY);
+    //displayText("RX", 250, 42, 37, 28, DISPLAY_BLACK, DISPLAY_GREEN, DISPLAY_BLUE);
+    displayFillrect(250, 42, 37, 28, DISPLAY_NAVY);
 }
 void drawStatusbar(){
   drawCWStatus();
+  displayVersion() ;
 }
 
 void guiUpdate(){
@@ -752,11 +760,11 @@ void doCommand(struct Button *b){
     switchBand(24800000l);
   else if (!strcmp(b->text, "10"))
     switchBand(28000000l);  
-  else if (!strcmp(b->text, "FRQ"))
+  else if (!strcmp(b->text, "FQ"))
     enterFreq();
-  else if (!strcmp(b->text, "WPM"))
+  else if (!strcmp(b->text, "W/M"))
     setCwSpeed();
-  else if (!strcmp(b->text, "TON"))
+  else if (!strcmp(b->text, "TN"))
     setCwTone();
 }
 
@@ -867,4 +875,3 @@ void doCommands(){
 
   checkCAT();
 }
-
diff --git a/ubitx_v6.1_code/ubitx_v6.1_code.ino b/ubitx_v6.1_code/ubitx_v6.1_code.ino
index 6663b8b..882591c 100644
--- a/ubitx_v6.1_code/ubitx_v6.1_code.ino
+++ b/ubitx_v6.1_code/ubitx_v6.1_code.ino
@@ -453,7 +453,7 @@ void startTx(byte txMode){
     digitalWrite(TX_RX, 1);     
   }
   drawTx();
-  //updateDisplay();
+  //updateDisplay(); //GPB.20200322A //Un-Commented
 }
 
 void stopTx(){
@@ -548,9 +548,11 @@ void checkButton(){
     downTime++;
     if (downTime > 300){
       doSetup2();
+      displayVersion() ;
       return;
     }
  }
+ 
  active_delay(100);
 
  
@@ -814,10 +816,12 @@ void setup()
     setupBFO();
   }
   guiUpdate();
-  displayRawText("v6.1", 270, 210, DISPLAY_LIGHTGREY, DISPLAY_NAVY);
+  displayVersion() ;
 }
 
 
+
+
 /**
  * The loop checks for keydown, ptt, function button and tuning.
  */
-- 
2.22.0.windows.1

